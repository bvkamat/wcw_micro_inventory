var Sequelize = require('sequelize');
var dotty = require('dotty');
var MsSqlModelInstance = require('./MsSqlModelInstance');

module.exports = MsSqlModel;

function MsSqlModel(sequelize,modelName,attributes,options) {	
	this.model = sequelize.define(modelName, attributes, options);
}

MsSqlModel.prototype.findAll = function(condition,fields,options,cb){
	var jsonString = JSON.stringify(condition);
	var changedString = jsonString.replace(/"\$gt":/g, '"gt":').replace(/"\$lt":/g, '"lt":').replace(/"\$gte":/g, '"gte":').replace(/"\$lte":/g, '"lte":');
	condition = JSON.parse(changedString);
	var jsonString = JSON.stringify(condition);
	var changedfieldString = jsonString.replace(/"":/g, '"gt":');
	condition = JSON.parse(changedString);
	var newcondition = {};
	newcondition.where = makequery(condition);
	if(dotty.exists(fields,'attributes'))
		newcondition.attributes = fields.attributes;
	if(dotty.exists(fields,'group'))
		newcondition.group = fields.group;
	if(dotty.exists(options,'sort')){
		var sortname = Object.keys(options.sort)[0];
		if(options.sort[sortname]==-1){
			var sortorder = 'DESC';
		}
		else{
			var sortorder = '';
		};	
	 newcondition.order = sortname + ' ' + sortorder;
	};
	
	//Check if Offset is Specified
	if(dotty.exists(options,'offset')){
		
		newcondition.offset = options.offset;
	};
	
	//Check if limit is Specified
	if(dotty.exists(options,'limit')){
		newcondition.limit = options.limit;
	};
	
	//Check if limit is specified - joins
	if(dotty.exists(options,'include')){
		var self = options.include[0].model;
		options.include[0].model = self.model;
		newcondition.include = options.include;
	};
	this.model.findAll(newcondition).then(				
			function(result){
				var resultarray = [];
				for(i in result){
					resultarray.push(new MsSqlModelInstance(result[i]));
				}
				cb(null,resultarray);		
			},function(err){
				console.log('Error: ' + err);
			});		
};

MsSqlModel.prototype.update = function(condition,attributes,cb){
	console.log('Executing Update');
	this.model.update(attributes,condition).then(				
			function(result){
				console.log('Successfully Updated');
				cb(null,result);		
			},function(err){
				console.log('Error in update');
				console.log('Error: ' + err);
			});			
};

MsSqlModel.prototype.find = function(condition,fields,cb){
	if(!(fields == null)){
		var splitfields = fields.split(" ");
		condition.attributes = splitfields;
	}
	this.model.find(condition).then(				
			function(result){
				cb(null,new MsSqlModelInstance(result));		
			},function(err){
				console.log('Error: ' + err);
			});			
};

MsSqlModel.prototype.count= function(condition, cb){
	this.model.count(condition).then(				
			function(result){
				cb(null,new MsSqlModelInstance(result));		
			},function(err){
				console.log('Error: ' + err);
			});			
};

MsSqlModel.prototype.build = function(options){
	return new MsSqlModelInstance(options,this.model);
}

MsSqlModel.prototype.hasMany = function(modelname,options){
	this.model.hasMany(modelname.model,options);
}

MsSqlModel.prototype.belongsTo = function(modelname,options){
	this.model.belongsTo(modelname.model,options);
}

var makequery = function(query){
	var newquery = query.where;
	var formedquery = {};
	if(dotty.exists(newquery,"$and")){
		formedquery = resolveand(newquery);
	}
	else if(dotty.exists(newquery,"$or")){
		formedquery = resolveor(newquery);
	}
	else {
		formedquery = newquery;
	}
	return formedquery;
};

var resolveand = function(query){
	var newquery = query.$and;
	var formedquery = [];
	for(i in newquery){
		if(dotty.exists(newquery[i],"$or")){			
			formedquery.push(resolveor(newquery[i]));
		}
		else{
			formedquery.push(newquery[i]);
		}
	}
	return Sequelize.and.apply(null,formedquery);
};

var resolveor = function(query){
	var newquery = query.$or;
	var formedquery = [];
	for(i in newquery){
		if(dotty.exists(newquery[i],"$and")){
			formedquery.push(resolveand(newquery[i]));
		}
		else{
			formedquery.push(newquery[i]);
		}
	}
	return Sequelize.or.apply(null,formedquery);
};

